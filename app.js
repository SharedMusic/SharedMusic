var express = require('express'),
    socket_io = require('socket.io'),
    path = require('path'),
    favicon = require('serve-favicon'),
    logger = require('morgan'),
    cookieParser = require('cookie-parser'),
    bodyParser = require('body-parser'),
    routes = require('./routes/index'),

    app = express(),
    io = socket_io();
    app.io = io;

var architecture = require('./architecture.js'),
    Room = architecture.Room,
    User = architecture.User,

    _ = require('underscore')._,
    uuid = require('uuid');

//the following folders are the folders that should be "GET"able
app.use(express.static(path.join(__dirname, 'public')));
app.use(express.static(path.join(__dirname, 'views')));
app.use(express.static(path.join(__dirname, 'documentation')));


var userIDToUser = {};
var rooms = {};

var roomReaper = setInterval(function() {
  for(var roomID in rooms) {
    if(rooms.hasOwnProperty(roomID)) {
      if(rooms[roomID].isEmpty()) {
        rooms[roomID].closeRoom();
        delete rooms[roomID];
      }
    }
  }
}, 5*60*1000);

io.sockets.on('connection', function(socket) {
  console.log("A socket with id:" + socket.id + " has connected.");


  //returns true if a room doesn't exist
  function roomError(room, roomID) {
    if (!room) {
	   socket.emit('onError', 'Room does not exist for ' + roomId);
		return true;
	 }
  }

  //returns true if an user doesn't exist
  function userError(user, userID) {
	 if (!user) {
	   socket.emit('onError', 'User does not exist for ' + userID);
		return true;
	 }
  }

  socket.on('disconnect', function() {
    var user = userIDToUser[socket.id];
    if(user != null) {
      var room = rooms[user.roomID];

      room.removeUser(user);

      delete userIDToUser[socket.id];
    }
  });

  socket.on('sendMessage', function(data) {
    var roomID = data.roomID;
    var userID = data.userID;
    var message = data.message;

    var room = rooms[roomID];
    var user = userIDToUser[userID];

	 if (roomError(room, roomID))
	   return;

	 if (userError(user, userID))
	   return;

    io.to(roomID).emit('onMessage',
    {
      name: user.name,
      message: message
    });
  });

  socket.on('joinRoom', function(data) {
    var roomID = data.roomID;
    var name = data.name;

    console.log(name + ' is joining ' + roomID)
    var room = rooms[roomID];

    if (roomError(room, roomID))
		return;

    var uName = room.getUniqueName(name);
    var uID = socket.id;

    var newUser = new User(uName, uID, roomID);


    console.log(newUser.id);
    io.to(socket.id).emit('userInfo', newUser.name, newUser.id);

    socket.join(roomID);

    room.addUser(newUser);
    userIDToUser[newUser.id] = newUser;
  })

  socket.on('addTrack', function(data) {
    var roomID = data.roomID;
    var userID = data.userID;
    var track = data.track;

    var room = rooms[roomID];
    var user = userIDToUser[userID];

	 if (roomError(room, roomID))
	   return;

	 if (userError(user, userID))
	   return;

    console.log('sucessfully added track!');

    room.addTrack(user, track);
  });

  socket.on('bootTrack', function(data) {
    var roomID = data.roomID;
    var userID = data.userID;

    var room = rooms[roomID];
    var user = userIDToUser[userID];

	 if (roomError(room, roomID))
	   return;

	 if (userError(user, userID))
	   return;

    room.bootTrack(user);
  })
});

var onRoomChange = function(roomID) {
  return function(roomState, error, userID) {
    if(roomState) {
      io.to(roomID).emit('onRoomUpdate',
      {
          name: roomState.name,
          users: roomState.users.array(),
          currentSongEpoch: roomState.currentSongEpoch,
          trackQueue: roomState.trackQueue.getQueue(),
          bootVotes: roomState.bootVotes.array()
      });
    } else if(error) {
      if(userID) {
        io.to(userID).emit('onError', error);
      } else {
        io.to(roomID).emit('onError', error);
      }
    } else {
      io.to(roomID).emit('onClose');
    }
  };
}

exports.rooms = rooms;
exports.onRoomChange = onRoomChange;



/*
 * === the following was auto-generated by Express ===
 */

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'jade');

app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser());

app.use('/', routes);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  var err = new Error('Not Found');
  err.status = 404;
  next(err);
});

// error handlers

// development error handler
// will print stacktrace
if (app.get('env') === 'development') {
  app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    res.render('error', {
      message: err.message,
      error: err
    });
  });
}

// production error handler
// no stacktraces leaked to user
app.use(function(err, req, res, next) {
  res.status(err.status || 500);
  res.render('error', {
    message: err.message,
    error: {}
  });
});
/*
 * === the end of auto-generated ===
 */


module.exports = app;
